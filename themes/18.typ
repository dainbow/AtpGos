#import "../conf.typ": *

== Стандартные контейнеры

#note("vector")[
  std::vector -- динамический массив.

  Основные операции:
  #eq[
    #table(
      columns: 2,
      align: (center, center),
      [*Операция*], [*Время*],
      [Получение элемента по индексу], [$O(1)$],
      [Вставка в конец], [$O^* (1)$],
      [Вставка в начало/середину], [$O(N)$],
      [Удаление из конца], [$O(1)$],
      [Удаление из начала/середины], [$O(N)$],
    )
  ]
]

#note("deque")[
  std::deque -- "двухсторонний" динамический массив, основан на кольцевом буффере на динамическом массиве.

  Основные операции:
  #eq[
    #table(
      columns: 2,
      align: (center, center),
      [*Операция*], [*Время*],
      [Получение элемента по индексу], [$O(1)$],
      [Вставка в начало/конец], [$O^* (1)$],
      [Вставка в середину], [$O(N)$],
      [Удаление из начала/конца], [$O(1)$],
      [Удаление из середины], [$O(N)$],
    )
  ]
]

#note("priority_queue")[
  std::priority_queue -- бинарная пирамида, по умолчанию является адаптером над std::vector.

  Основные операции:
  #eq[
    #table(
      columns: 2,
      align: (center, center),
      [*Операция*], [*Время*],
      [Вставка], [$O(log N)$],
      [Удаление минимума], [$O(log N)$],
      [Получение минимума], [$O(1)$],
    )
  ]
]

#note("map")[
  std::map -- ассоциативный контейнер, является красно-чёрным деревом пар ключ-значение, где сравнения все по ключам.

  Основные операции:
  #eq[
    #table(
      columns: 2,
      align: (center, center),
      [*Операция*], [*Время*],
      [Вставка пары ключ-значение], [$O(log N)$],
      [Удаление по ключу], [$O(log N)$],
      [Поиск по ключу], [$O(log N)$],
    )
  ]
]

#note("Итераторы")[
  Итератор -- объект, созданный поверх некоторого контейнера, в зависимости от предоставляемых возможностей, делится на категории:

  #image("../assets/iterators.png")
]

#definition[
  *Компаратор* - функциональный объект, проверяющий, принадлежат ли два объекта одного типа к требуему отношению "меньше".
]
