#import "../conf.typ": *

== Поиск кратчайших путей в графе.

#note("Алгоритм Дейкстры")[
  Ищет кратчайшие пути в графе от заданной вершины $s$ до всех, если веса рёбер неотрицательны.

  - Инициализируем множество $S = {s}$ -- множество вершин, для которых кратчайшее расстояние вычислено корректно на текущий момент времени, также будет массив $d$ текущих оценок на весь кратчайшего пути до вершин.
  - Очевидно, $d[s] = 0$, а для любой другой вершины -- бексконечность
  - Рассмотрим все вершины $v$ такие, что $v in.not S$, выберем среди них такую, что $d[v]$ минимально
  - Добавим $v$ в множество $S$, присвоим $"dist"(s, v) = d[v]$
  - Рассмотрим рёбра вида $(v, t)$, запишем $d[t] = min("dist"(s, v) + w(v, t), d[t])$
  - Пока $S != V$, то повторим шаги выше
]

#note("Алгоритм Форда-Беллмана")[
  Ищет кратчайшие пути из $k$ рёбер в графе от заданной вершины $s$ до всех, если веса рёбер неотрицательны.
  - Инициализируем матрицу dp[v][k] текущих оценок на весь кратчайшего пути до вершины v с количеством рёбер $k$.
  - Очевидно, $"dp"[s][0] = 0$, а иначе -- бесконечность
  - Далее будем увеличивать $k = 1... abs(V) - 1$ в предположении, что для предыдущего $k$ все значения корректны
  - Далее перебираем все рёбра $e = (v, u)$ и пытаемся отрелаксировать текущее значение $"dp"[u][k] = min("dp"[u][k], "dp"[v][k - 1] + w(e))$
]

#note("Алгоритм Флойда-Уоршелла")[
  Дан взвешенный граф без циклов отрицательного веса, нужно найти расстояние от всех вершин до всех
  - Инициализируем трёхмерную dp[u][v][k] текущих оценок на вес кратчайшего пути до вершины v из u, если путь состоит из вершин с номерами, меньшими $k$.
  - Очевидно, $"dp"[u][u][0] = 0$, а иначе -- бесконечность
  - Далее будем увеличивать $k = 1... abs(V) - 1$ в предположении, что для предыдущего $k$ все значения корректны
  - Далее перебираем все пары вершин $u, v$ и пытаемся отрелаксировать ДП следующим образом $"dp"[u][v][k] = min("dp"[u][v][k], "dp"[u][k][k - 1] + "dp"[k][v][k - 1])$.
]
